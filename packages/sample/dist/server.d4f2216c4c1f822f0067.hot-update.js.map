{"version":3,"sources":["webpack:///./src/index.js"],"names":["argv","yargs","COMMAND_ARGS","command","process","env","COMMAND","INSTRUCTION_DELIMITER","delimiter","DELIMITER","instructions","split","map","str","x","filter","y","console","log","commandGroup","i","l","length","action","Date","match","pattern","fn","commands","tap","toLowerCase"],"mappings":";;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,MAAM;AAAEA;AAAF,IAAWC,eAAjB;AAEA,MAAMC,YAAY,GAAGF,IAAI,CAACG,OAAL,IAAgBC,OAAO,CAACC,GAAR,CAAYC,OAA5B,IAAuC,EAA5D;AACA,MAAMC,qBAAqB,GAAGP,IAAI,CAACQ,SAAL,IAAkBJ,OAAO,CAACC,GAAR,CAAYI,SAA9B,IAA2C,IAAzE;AAEA,MAAMC,YAAY,GAAGR,YAAY,CAACS,KAAb,CAAmBJ,qBAAnB,EAClBK,GADkB,CACdC,GAAG,IAAI,kBAAOA,GAAP,CADO,EAElBD,GAFkB,CAEdE,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASC,CAAC,IAAI,CAAC,CAACA,CAAhB,CAFS,CAArB;AAIAC,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAR,YAAY,CAACE,GAAb,CAAiB,MAAMO,YAAN,IAAsB;AACrC,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCF,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,IAAI,CAArD,EAAwD;AACtD,UAAMjB,OAAO,GAAGgB,YAAY,CAACC,CAAD,CAA5B;AACA,UAAMG,MAAM,GAAG,gBAAKpB,OAAL,CAAf;;AACA,QAAIoB,MAAJ,EAAY;AACVN,aAAO,CAACC,GAAR,CAAa,yBAAb,EAAuC,IAAIM,IAAJ,EAAvC;AACA,YAAMC,KAAK,GAAGtB,OAAO,CAACsB,KAAR,CAAcF,MAAM,CAACG,OAArB,CAAd;AACI,YAAMH,MAAM,CAACI,EAAP,CAAUF,KAAK,CAAC,CAAD,CAAf,CAAN,CAHM,CAGoB;AAC/B,KAJD,MAIO;AACLR,aAAO,CAACC,GAAR,CAAa,cAAaf,OAAQ,EAAlC,EAAqC,IAAIqB,IAAJ,EAArC;;AACAI,qBAASC,GAAT,CAAa1B,OAAO,CAAC2B,WAAR,EAAb;AACD;AACF;AACF,CAbD;AAcAb,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,IAAIM,IAAJ,EAAxB,E","file":"server.d4f2216c4c1f822f0067.hot-update.js","sourcesContent":["import yargs from 'yargs';\nimport commands, { parser, find } from '@macro/core';\n\nconst { argv } = yargs;\n\nconst COMMAND_ARGS = argv.command || process.env.COMMAND || '';\nconst INSTRUCTION_DELIMITER = argv.delimiter || process.env.DELIMITER || '$$';\n\nconst instructions = COMMAND_ARGS.split(INSTRUCTION_DELIMITER)\n  .map(str => parser(str))\n  .map(x => x.filter(y => !!y));\n\nconsole.log('starting');\ninstructions.map(async commandGroup => {\n  for (let i = 0, l = commandGroup.length; i < l; i += 1) {\n    const command = commandGroup[i];\n    const action = find(command);\n    if (action) {\n      console.log(`will exec custom action`, new Date());\n      const match = command.match(action.pattern);\n          await action.fn(match[1]);//eslint-disable-line\n    } else {\n      console.log(`will press ${command}`, new Date());\n      commands.tap(command.toLowerCase());\n    }\n  }\n});\nconsole.log('finished', new Date());\n"],"sourceRoot":""}